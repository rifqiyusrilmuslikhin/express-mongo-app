{
	"info": {
		"_postman_id": "6a78c9c5-7e3b-4416-9adc-89147a1c0d18",
		"name": "test_case",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24272935"
	},
	"item": [
		{
			"name": "Get Cities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an array', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.be.an('array');",
							"    pm.expect(responseJson).to.have.lengthOf.at.least(2);",
							"",
							"    responseJson.forEach((city) => {",
							"        pm.expect(city._id).to.be.ok;",
							"        pm.expect(city.name).to.be.ok;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/cities",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"cities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User City Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(404);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail.com\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password123\",\n  \"name\": \"Rifqi Yusril Muslikhin\",\n  \"address\": \"123 Main Street\",\n  \"cityId\": \"xxx\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User Password Not Match",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(403);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail.com\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password1234\",\n  \"name\": \"Rifqi Yusril Muslikhin\",\n  \"address\": \"123 Main Street\",\n  \"cityId\": \"{{cityId}}\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User Not Valid Email Format",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password123\",\n  \"name\": \"Rifqi Yusril Muslikhin\",\n  \"address\": \"jalan raya randegan\",\n  \"cityId\": \"{{cityId}}\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User Invalid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(403);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail.com\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password123\",\n  \"address\": \"123 Main Street\",\n  \"cityId\": \"{{cityId}}\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User Valid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body has correct properties and values', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.success).to.be.true;",
							"",
							"    pm.expect(responseJson.data.email).to.be.a('string');",
							"    pm.expect(responseJson.data.password).to.be.a('string');",
							"    pm.expect(responseJson.data.name).to.be.a('string');",
							"    pm.expect(responseJson.data.address).to.be.a('string');",
							"    pm.expect(responseJson.data.cityId).to.be.a('string');",
							"",
							"    pm.expect(responseJson.data.hobbies).to.be.an('array').that.satisfies((hobbies) => {",
							"        return hobbies.every(hobby => typeof hobby === 'string');",
							"    });",
							"",
							"    pm.expect(responseJson.data.last_login).to.be.null;",
							"    pm.expect(responseJson.data.created_at).to.be.a('string');",
							"    pm.expect(responseJson.data.updated_at).to.be.a('string');",
							"    pm.expect(responseJson.data._id).to.be.a('string');",
							"    pm.expect(responseJson.data.__v).to.be.a('number');",
							"",
							"    pm.environment.set('userId', responseJson.data._id);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail.com\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password123\",\n  \"name\": \"Rifqi Yusril Muslikhin\",\n  \"address\": \"jalan raya randegan\",\n  \"cityId\": \"{{cityId}}\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User Email Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(403);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"rifqi@gmail.com\",\n  \"password\": \"password123\",\n  \"password_confirm\": \"password123\",\n  \"name\": \"Rifqi Yusril Muslikhin\",\n  \"address\": \"jalan raya randegan\",\n  \"cityId\": \"{{cityId}}\",\n  \"hobbies\": [\"Reading\", \"Swimming\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Invalid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(401);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"example@example.com\",\n    \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Valid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"rifqi@gmail.com\",\n    \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Account Id Not Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(404);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/xxx",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"xxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Account Id Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body has correct properties and values', () => {",
							"  const responseJson = pm.response.json();",
							"",
							"  pm.expect(responseJson.id).to.be.ok;",
							"  pm.expect(responseJson.email).to.be.a('string');",
							"",
							"  pm.expect(responseJson.profile).to.be.an('object');",
							"  const profile = responseJson.profile;",
							"  pm.expect(profile.name).to.be.a('string');",
							"  pm.expect(profile.address).to.be.a('string');",
							"",
							"  pm.expect(profile.city).to.be.an('object');",
							"  const city = profile.city;",
							"  pm.expect(city._id).to.be.a('string');",
							"  pm.expect(city.name).to.be.a('string');",
							"",
							"  pm.expect(profile.hobbies).to.be.an('array').that.satisfies((hobbies) => {",
							"        return hobbies.every(hobby => typeof hobby === 'string');",
							"    });",
							"",
							"  pm.expect(responseJson.last_login).to.be.a('string');",
							"  pm.expect(responseJson.created_at).to.be.a('string');",
							"  pm.expect(responseJson.updated_at).to.be.a('string');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Password Id Not Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(404);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"currentPassword\": \"password123\",\n    \"newPassword\": \"password1234\",\n    \"passwordConfirm\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/xxx",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"xxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Password Invalid Current Password",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"currentPassword\": \"password1233333\",\n    \"newPassword\": \"password1234\",\n    \"passwordConfirm\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Password Not Match Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(403);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"currentPassword\": \"password123\",\n    \"newPassword\": \"password1234\",\n    \"passwordConfirm\": \"password123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Password Valid Payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 200 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"currentPassword\": \"password123\",\n    \"newPassword\": \"password1234\",\n    \"passwordConfirm\": \"password1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Account Id Not Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(404);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.error).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/xxx",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"xxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Account Id Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('it should response 400 status code', () => {",
							"    pm.expect(pm.response).to.have.status(201);",
							"});",
							"",
							"pm.test('response Content-Type header should have application/json value', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');",
							"}); ",
							"",
							"pm.test('response body should an object', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test('response body have correct property and value', () => {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.success).to.be.a('boolean');",
							"    pm.expect(responseJson.message).to.be.a('string');",
							"})",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:{{port}}/api/accounts/{{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"accounts",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}